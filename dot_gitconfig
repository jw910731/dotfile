[core]
	editor = "joe"

[diff]
    tool = vscode

[difftool "vscode"]
    cmd = code --wait --diff $LOCAL $REMOTE

[filter "lfs"]
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
	clean = git-lfs clean -- %f

[user]
	name = jw910731
	email = jw910731@gmail.com
	signingkey = B5831125BF047788

[commit]
	gpgsign = true

[color]
  ui = true

[color "diff-highlight"]
  oldNormal = red bold
  oldHighlight = white bold 52
  newNormal = green bold
  newHighlight = white bold 22

[pull]
	rebase = false

[merge]
	tool = joe
	guitool = vscode

[mergetool "joe"]
	cmd = joe
[mergetool "vscode"]
    cmd = code --wait $MERGED

# Alias
[alias]
	# add
	a = add                           # add
	# chunkyadd = add --patch           # stage commits chunk by chunk

	# via http://blog.apiaxle.com/post/handy-git-tips-to-stop-you-getting-fired/
	# snapshot = !git stash save "snapshot: $(date)" && git stash apply "stash@{0}"
	# snapshots = !git stash list --grep snapshot

	#via http://stackoverflow.com/questions/5188320/how-can-i-get-a-list-of-git-branches-ordered-by-most-recent-commit
	recent-branches = !git for-each-ref --count=15 --sort=-committerdate refs/heads/ --format='%(refname:short)'

	# branch
	b = branch -v                     # branch (verbose)

	# commit
	c = commit                     	  # commit with message
	ca = commit -am                   # commit all with message
	cm = commit -m                    # commit
	amend = commit --amend            # ammend your last commit
	ammend = commit --amend           # ammend your last commit

	# checkout
	ck = checkout                     # checkout
	nbr = checkout -b                 # create and switch to a new branch (mnemonic: "git new branch branchname...")

	# cherry-pick
	# cp = cherry-pick -x             # grab a change from a branch

	# diff
	d = diff                          # diff unstaged changes
	dc = diff --cached                # diff staged changes
	last = diff HEAD^                 # diff last committed change

	# log
	l = log --graph --date=short
	changes = log --pretty=format:\"%h %cr %cn %Cgreen%s%Creset\" --name-status
	short = log --pretty=format:\"%h %cr %cn %Cgreen%s%Creset\"
	simple = log --pretty=format:\" * %s\"
	# shortnocolor = log --pretty=format:\"%h %cr %cn %s\"

	# pull
	pl = pull                         # pull

	# push
	ps = push                         # push

	# rebase
	# rc = rebase --continue          # continue rebase
	# rs = rebase --skip              # skip rebase

	# remote
	r = remote -v                     # show remotes (verbose)

	# reset
	unstage = reset HEAD              # remove files from index (tracking)
	uncommit = reset --soft HEAD^     # go back before last commit, with files in uncommitted state
	filelog = log -u                  # show changes to a file
	mt = mergetool -g                 # fire up the merge tool

	# stash
	ss = stash                        # stash changes
	sl = stash list                   # list stashes
	sa = stash apply                  # apply stash (restore changes)
	sd = stash drop                   # drop stashes (destory changes)

	# status
	s = status                        # status
	st = status                       # status
	stat = status                     # status

	# tag
	# t = tag -n                      # show tags with <n> lines of each tag message
